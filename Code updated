# Load necessary libraries
library(shiny)
library(readxl)
library(tidyverse)
library(drc)
library(writexl)
library(scales)

# Define the User Interface (UI) of the app
ui <- fluidPage(
  titlePanel("ELISA Analysis Tool with Enhanced Model Selection"),
  sidebarLayout(
    sidebarPanel(
      fileInput("file", "Upload 96-well Excel file"),
      checkboxInput("has_header", "File has column headers", FALSE),
      uiOutput("well_select_ui"),
      textInput("standard_conc", "Enter standard concentrations (comma-separated, top to bottom):",
                "2,1.2,0.7,0.4,0.2,0.1,0.06"),
      actionButton("add_sample", "Add Sample"),
      actionButton("analyze", "Analyze"),
      downloadButton("download", "Download Results")
    ),
    mainPanel(
      plotOutput("curvePlot"),
      plotOutput("debugPlot"),
      tableOutput("resultTable"),
      verbatimTextOutput("errorOut")
    )
  )
)

server <- function(input, output, session) {
  error_message <- reactiveVal(NULL)
  sample_groups <- reactiveVal(list(list(id = 1, name = "Sample 1", wells = character())))
  sample_counter <- reactiveVal(1)
  
  # Add logic to dynamically add new samples
  observeEvent(input$add_sample, {
    counter <- sample_counter() + 1
    sample_counter(counter)
    groups <- sample_groups()
    groups[[counter]] <- list(id = counter, name = paste0("Sample ", counter), wells = character())
    sample_groups(groups)
  })
  
  # Load and preprocess plate data
  plate_data <- reactive({
    req(input$file)
    tryCatch({
      df_raw <- read_excel(input$file$datapath, col_names = input$has_header)
      row_ids <- df_raw[[1]]
      df_raw <- df_raw[, -1]
      df_clean <- as.data.frame(df_raw)
      rownames(df_clean) <- row_ids
      
      df_clean <- df_clean %>%
        mutate(across(where(~ all(grepl("^[0-9.]+$", ., perl = TRUE))), as.numeric))
      
      df_long <- df_clean %>%
        rownames_to_column("Row") %>%
        pivot_longer(-Row, names_to = "Col", values_to = "OD") %>%
        mutate(Col = as.character(Col), Well = paste0(Row, Col))
      
      df_long
    }, error = function(e) {
      error_message(paste("Error loading file:", e$message))
      return(NULL)
    })
  })
  
  # Generate UI for well selection
  output$well_select_ui <- renderUI({
    df <- plate_data()
    req(df)
    
    if (!"Well" %in% names(df)) {
      return(tags$p("Waiting for valid plate data..."))
    }
    
    wells <- unique(df$Well)
    groups <- sample_groups()
    
    tagList(
      selectInput("blank_wells", "Select Blank Wells", choices = wells, multiple = TRUE, selected = c("H1", "H2", "H3")),
      selectInput("standard_wells", "Select Standard Wells (match order of concentrations)",
                  choices = wells, multiple = TRUE,
                  selected = c("A1","A2","A3","B1","B2","B3","C1","C2","C3",
                               "D1","D2","D3","E1","E2","E3","F1","F2","F3",
                               "G1","G2","G3")),
      lapply(seq_along(groups), function(i) {
        fluidRow(
          column(6, textInput(paste0("sample_name_", groups[[i]]$id), paste("Name of Sample", i), value = groups[[i]]$name)),
          column(6, selectInput(paste0("sample_wells_", groups[[i]]$id), paste("Wells for Sample", i), choices = wells, multiple = TRUE))
        )
      })
    )
  })
  
  # Analyze the data and select the best model
  result <- eventReactive(input$analyze, {
    tryCatch({
      error_message(NULL)
      df <- plate_data()
      conc_text <- gsub("\\s+", "", input$standard_conc)
      standard_concs <- as.numeric(strsplit(conc_text, ",")[[1]])
      
      selected_standards <- input$standard_wells
      
      # Validate inputs
      if (length(standard_concs) == 0 || any(is.na(standard_concs))) {
        stop("Invalid standard concentrations entered.")
      }
      
      if (length(input$blank_wells) < 1) {
        stop("Please select at least one blank well.")
      }
      
      replicates_per_conc <- length(selected_standards) / length(standard_concs)
      if (!replicates_per_conc %% 1 == 0) {
        stop("Mismatch: Number of standard wells must be evenly divisible by the number of concentrations.")
      }
      
      repeated_concs <- rep(standard_concs, each = replicates_per_conc)
      
      df <- df %>%
        mutate(Type = case_when(
          Well %in% input$blank_wells ~ "Blank",
          Well %in% input$standard_wells ~ "Standard",
          TRUE ~ "Other"
        ))
      
      standard_map <- tibble(Well = selected_standards, Concentration = repeated_concs)
      df <- df %>% left_join(standard_map, by = "Well")
      
      blank_val <- mean(df %>% filter(Type == "Blank") %>% pull(OD), na.rm = TRUE)
      df <- df %>% mutate(OD_corrected = OD - blank_val)
      
      standards_stats <- df %>%
        filter(Type == "Standard") %>%
        group_by(Concentration) %>%
        summarise(
          Mean_OD = mean(OD_corrected, na.rm = TRUE),
          SD = sd(OD_corrected, na.rm = TRUE),
          .groups = "drop"
        )
      
      # Fit models
      fit_linear <- lm(Mean_OD ~ Concentration, data = standards_stats)
      r2_linear <- summary(fit_linear)$r.squared
      
      fit_logistic <- tryCatch({
        drm(Mean_OD ~ Concentration, data = standards_stats, fct = LL.4())
      }, error = function(e) NULL)
      
      r2_logistic <- if (!is.null(fit_logistic)) {
        1 - sum(residuals(fit_logistic)^2) / sum((standards_stats$Mean_OD - mean(standards_stats$Mean_OD))^2)
      } else {
        0
      }
      
      # Debugging: Print R² values
      print(paste("Linear model R²:", r2_linear))
      if (!is.null(fit_logistic)) {
        print(paste("4PL model R²:", r2_logistic))
      } else {
        print("4PL model failed to fit.")
      }
      
      # Select the best model
      if (r2_linear > r2_logistic || is.null(fit_logistic)) {
        fit <- fit_linear
        model_type <- "linear"
      } else {
        fit <- fit_logistic
        model_type <- "4PL"
      }
      
      # Feedback to the user
      showNotification(paste("Model selected:", model_type, "with R² =", round(ifelse(model_type == "linear", r2_linear, r2_logistic), 3)))
      
      # Process sample data
      
      sample_input <- sample_groups()
      sample_data <- lapply(sample_input, function(group) {
        name_input <- input[[paste0("sample_name_", group$id)]]
        wells_input <- input[[paste0("sample_wells_", group$id)]]
        
        if (is.null(wells_input) || length(wells_input) == 0) return(NULL)
        if (!all(wells_input %in% df$Well)) {
          warning("Some selected wells are not present in the dataset.")
          return(NULL)
        }
        
        od_vals <- df %>% filter(Well %in% wells_input) %>% pull(OD_corrected)
        mean_od <- mean(od_vals, na.rm = TRUE)
        sd_od <- sd(od_vals, na.rm = TRUE)
        
        pred_conc <- tryCatch({
          if (model_type == "linear") {
            predict(fit, newdata = data.frame(Concentration = mean_od))
          } else {
            ED(fit, respLev = mean_od, type = "absolute", interval = "delta")[1, "Estimate"]
          }
        }, error = function(e) {
          NA_real_
        })
        
        tibble(Sample = name_input, Mean_OD = mean_od, SD = sd_od, Predicted_Conc = pred_conc, Wells = paste(wells_input, collapse = ","))
      })
      
      samples_df <- bind_rows(sample_data)
      list(standards = standards_stats, samples = samples_df, fit = fit, r2 = ifelse(model_type == "linear", r2_linear, r2_logistic), model = model_type)
    }, error = function(e) {
      error_message(paste("Error during analysis:", e$message))
      return(NULL)
    })
  })
  output$curvePlot <- renderPlot({
    req(result())
    standards <- result()$standards %>%
      mutate(Concentration = as.numeric(Concentration))
    
    curve_data <- tibble(Concentration = seq(min(standards$Concentration),
                                             max(standards$Concentration),
                                             length.out = 100))
    
    curve_data <- tryCatch({
      curve_data %>%
        mutate(Fitted_OD = predict(result()$fit, newdata = curve_data))
    }, error = function(e) {
      curve_data %>% mutate(Fitted_OD = NA_real_)
    })
    
    ggplot(standards, aes(x = Concentration, y = Mean_OD)) +
      geom_point(size = 3) +
      geom_errorbar(aes(ymin = Mean_OD - SD, ymax = Mean_OD + SD), width = 0.05) +
      geom_line(data = curve_data, aes(x = Concentration, y = Fitted_OD), color = "blue") +
      geom_point(data = result()$samples, aes(x = Predicted_Conc, y = Mean_OD), color = "red", size = 3) +
      geom_errorbar(data = result()$samples,
                    aes(x = Predicted_Conc, ymin = Mean_OD - SD, ymax = Mean_OD + SD),
                    color = "red", width = 0.1) +
      geom_text(data = result()$samples, aes(x = Predicted_Conc, y = Mean_OD, label = Sample), vjust = -1, color = "red") +
      labs(title = paste("Standard Curve (", result()$model, ", R² =", round(result()$r2, 3), ")"),
           x = "Concentration", y = "Corrected OD") +
      theme_minimal(base_size = 14)
  })
  
  output$debugPlot <- renderPlot({
    req(plate_data())
    df <- plate_data()
    req(input$blank_wells)
    blank_val <- mean(df %>% filter(Well %in% input$blank_wells) %>% pull(OD), na.rm = TRUE)
    
    df <- df %>%
      mutate(
        OD_corrected = OD - blank_val,
        Well_Type = case_when(
          Well %in% input$blank_wells ~ "Blank",
          Well %in% input$standard_wells ~ "Standard",
          TRUE ~ "Sample"
        )
      )
    
    sample_input <- sample_groups()
    labels_df <- bind_rows(lapply(sample_input, function(group) {
      name_input <- input[[paste0("sample_name_", group$id)]]
      wells_input <- input[[paste0("sample_wells_", group$id)]]
      tibble(Well = wells_input, Label = name_input)
    }))
    
    df <- left_join(df, labels_df, by = "Well")
    
    ggplot(df, aes(x = reorder(Well, OD_corrected), y = OD_corrected, fill = Well_Type)) +
      geom_col(show.legend = TRUE) +
      geom_text(aes(label = Label), vjust = -0.5, size = 3, color = "black") +
      scale_fill_manual(values = c("Standard" = "steelblue", "Sample" = "tomato", "Blank" = "gray")) +
      coord_flip() +
      labs(
        title = "Corrected OD by Well",
        x = "Well",
        y = "Corrected OD"
      ) +
      theme_minimal(base_size = 14) +
      theme(axis.text.y = element_text(angle = 20, hjust = 1, size = 5))
  })
  
  output$download <- downloadHandler(
    filename = function() { paste0("elisa_results_", Sys.Date(), ".pdf") },
    content = function(file) {
      pdf(file, width = 8.5, height = 11)  # Standard letter size
      
      standards <- result()$standards
      samples <- result()$samples
      fit <- result()$fit
      model_type <- result()$model
      r2 <- result()$r2
      
      curve_data <- tibble(Concentration = seq(min(standards$Concentration),
                                               max(standards$Concentration),
                                               length.out = 100))
      curve_data <- tryCatch({
        curve_data %>%
          mutate(Fitted_OD = predict(fit, newdata = curve_data))
      }, error = function(e) {
        curve_data %>% mutate(Fitted_OD = NA_real_)
      })
      
      p <- ggplot(standards, aes(x = Concentration, y = Mean_OD)) +
        geom_point(size = 3) +
        geom_errorbar(aes(ymin = Mean_OD - SD, ymax = Mean_OD + SD), width = 0.05) +
        geom_line(data = curve_data, aes(x = Concentration, y = Fitted_OD), color = "blue", size = 1.2) +
        geom_point(data = samples, aes(x = Predicted_Conc, y = Mean_OD), color = "red", size = 3) +
        geom_errorbar(data = samples, aes(x = Predicted_Conc, ymin = Mean_OD - SD, ymax = Mean_OD + SD),
                      color = "red", width = 0.1) +
        geom_text(data = samples, aes(x = Predicted_Conc, y = Mean_OD, label = Sample), vjust = -1, color = "red") +
        labs(title = paste0("Standard Curve (", model_type, ", R² = ", round(r2, 3), ")"),
             x = "Concentration", y = "Corrected OD") +
        theme_minimal(base_size = 14)
      
      # Conditionally apply log10 scale for 4PL model
      if (model_type == "4PL") {
        p <- p + scale_x_log10()
      }
      
      table_theme <- gridExtra::ttheme_default(
        core = list(fg_params = list(cex = 1.0)),
        colhead = list(fg_params = list(fontface = "bold", cex = 1.2))
      )
      table_plot <- gridExtra::tableGrob(samples, theme = table_theme)
      
      gridExtra::grid.arrange(
        p,
        table_plot,
        ncol = 1,
        heights = c(2, 1)
      )
      
      dev.off()
    }
  )
  
  
  
  
}

shinyApp(ui, server)

